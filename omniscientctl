#!/bin/bash
# omniscientctl - Unified Command Line Tool for Omniscient Framework
# Location: /usr/local/bin/omniscientctl
# Description: Controls all major system features in Omniscient OSINT/Forensics framework.

LOGFILE="/opt/omniscient/logs/omniscientctl.log"
exec >> >(tee -a "$LOGFILE") 2>&1

COMMAND="$1"
SUBCOMMAND="$2"

function help_menu() {
    cat <<EOF

üß† Omniscient CLI Control ‚Äî omniscientctl

Usage:
  omniscientctl <command> [options]

Main Commands:
  launch-dashboard           Launch the unified Streamlit dashboard
  launch-threatmap           Run Taipy-based threat timeline visualization
  voice                      Start AI-powered voice agent
  speak "<text>"             Speak a phrase via TTS
  script scan [--annotate]   Audit and auto-annotate scripts for logging
  export-case                Export current case notes and transcripts to PDF
  auto-tag-case              Run AI auto-tagging on case content
  omnilog-summarize          Summarize system logs using LLM
  omnieye-digest             Analyze web scraped data via Omnieye and LLM
  system update|backup       Run system maintenance commands
  dev refresh-env|check-venv|annotate  Developer tasks
  module <name>              Dynamically execute module from /opt/omniscient/modules/

EOF
}

case "$COMMAND" in

# üéõÔ∏è Dashboard Control
launch-dashboard)
    streamlit run /opt/omniscient/web/unified_dashboard.py
    ;;

launch-threatmap)
    python3 /opt/omniscient/web/taipy_threat_dashboard.py
    ;;

# üîä Voice + AI Agent
voice)
    python3 /opt/omniscient/ai/voice_agent_upgraded.py
    ;;

speak)
    python3 /opt/omniscient/ai/speak.py "$SUBCOMMAND"
    ;;

# üîç Script Log + Annotator
script)
    if [[ "$SUBCOMMAND" == "scan" && "$3" == "--annotate" ]]; then
        cat /opt/omniscient/docs/annotated-inline-script-summary.md
    elif [[ "$SUBCOMMAND" == "scan" ]]; then
        bash /opt/omniscient/scripts/inject_logging_wrapper.sh
    else
        echo "[!] Unknown script subcommand."
    fi
    ;;

# üìÅ Case Management
export-case)
    python3 /opt/omniscient/ai/smart_case_export.py
    ;;

auto-tag-case)
    python3 /opt/omniscient/ai/auto_tag_cases.py
    ;;

# üìä AI Pipelines
omnilog-summarize)
    python3 /opt/omniscient/ai/log_summarizer.py /var/log/syslog
    ;;

omnieye-digest)
    python3 /opt/omniscient/ai/omnieye_digest_ai.py
    ;;

# üîß System Maintenance
system)
    case "$SUBCOMMAND" in
        update)
            bash /opt/omniscient/scripts/omniscient_system_setup.sh
            ;;
        backup)
            bash /opt/omniscient/scripts/omniscient_file_infrastructure_backup.sh
            ;;
        restore)
            echo "[!] Restore not implemented."
            ;;
        *)
            echo "[!] Unknown system subcommand."
            ;;
    esac
    ;;

# üß™ Developer Tools
dev)
    case "$SUBCOMMAND" in
        refresh-env)
            source /opt/omniscient/venv/bin/activate
            ;;
        check-venv)
            python3 -m pip check
            ;;
        annotate)
            bash /opt/omniscient/scripts/generate_omniscient_immutable_sql_manifest.sh
            ;;
        *)
            echo "[!] Unknown dev subcommand."
            ;;
    esac
    ;;

# üß© Modular Extensions (bin scripts)
system|osint)
    MODULE_PATH="/opt/omniscient/bin/omniscientctl-modules/${COMMAND}-${SUBCOMMAND}"
    if [[ -x "$MODULE_PATH" ]]; then
        "$MODULE_PATH" "${@:3}"
    else
        echo "[!] Command module not found: $MODULE_PATH"
    fi
    ;;

# üì¶ Dynamic Module Loader
module)
    MODNAME="$SUBCOMMAND"
    MODFILE="/opt/omniscient/modules/module-${MODNAME}.sh"
    if [[ -x "$MODFILE" ]]; then
        "$MODFILE" "${@:3}"
    else
        echo "[!] Module not found or not executable: $MODFILE"
    fi
    ;;

# ‚ùì Help
--help|-h|help|"")
    help_menu
    ;;

*)
    echo "[!] Unknown command: $COMMAND"
    help_menu
    ;;
esac